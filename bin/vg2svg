#!/usr/bin/env node
// Render a Vega specification to SVG

const helpText =
  'Render a Vega specification to SVG.\n\n' +
  'Usage: vg2svg [vega_json_file] [output_svg_file]\n' +
  '  If no arguments are provided, reads from stdin.\n' +
  '  If output_svg_file is not provided, writes to stdout.\n\n' +
  'To load data, you may need to set a base directory:\n' +
  '  For web retrieval, use `-b http://host/data/`. \n' +
  '  For files, use `-b file:///dir/data/` (absolute) or `-b data/` (relative).';

const svgHeader =
  '<?xml version="1.0" encoding="utf-8"?>\n' +
  '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ' +
  '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n';

// import required libraries
const path = require('path'),
      fs = require('fs'),
      lcg = require('./lcg'),
      read = require('./read'),
      vega = require('../');

// arguments
const args = require('yargs')
  .usage(helpText)
  .demand(0)
  .string('b')
    .alias('b', 'base')
    .describe('b', 'Base directory for data loading.')
  .number('seed')
    .describe('seed', 'Seed for random number generation.')
  .boolean('h')
    .alias('h', 'header')
    .describe('h', 'Include XML header and SVG doctype.')
  .help()
  .version()
  .argv;

// set baseURL if provided on command line
const base = args.b ? args.b + path.sep : null;

// Plug-in a deterministic random number generator for testing.
if (typeof args.seed !== 'undefined') {
  if (isNaN(args.seed)) throw 'Illegal seed value: must be a valid number.';
  vega.setRandom(lcg(args.seed));
}

// SVG header string
const header = args.h ? svgHeader : '';

// output file
const outputFile = args._[1] || null;

// read input from file or stdin
read(args._[0] || null)
  .then(text => { render(JSON.parse(text)); })
  .catch(err => { console.error(err); });

function render(spec) {
  new vega.View(vega.parse(spec), {
      loader: vega.loader({baseURL: base}),
      logLevel: vega.Warn,
      renderer: 'none'
    })
    .initialize()
    .finalize()
    .toSVG()
    .then(svg => { writeSVG(svg, outputFile); })
    .catch(err => { console.error(err); });
}

function writeSVG(svg, file) {
  svg = header + svg;
  if (file) {
    // write to file
    fs.writeFile(file, svg, err => { if (err) throw err; });
  } else {
    // write to stdout
    process.stdout.write(svg);
  }
}
