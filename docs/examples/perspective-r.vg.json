{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 400,
  "height": 400,
  "background": {"signal": "theme === 'dark'?'black':'white'"},
  "title": {
    "text": "3D Matrix",
    "color": {"signal": "theme === 'dark' ? 'lightgrey':'black'"},
    "dy": 25
  },
  "signals": [
    {"name": "x_sequence", "value": {"min": -1, "max": 1, "count": 40}},
    {"name": "y_sequence", "value": {"min": -1, "max": 1, "count": 40}},
    {
      "name": "scheme",
      "value": "viridis",
      "bind": {
        "input": "select",
        "options": [
          "viridis",
          "blueorange",
          "darkgold",
          "darkblue",
          "darkgreen",
          "darkmulti",
          "purplegreen",
          "spectral"
        ]
      }
    },
    {
      "name": "theme",
      "value": "dark",
      "bind": {"input": "select", "options": ["dark", "light"]}
    },
    {
      "name": "theta",
      "value": 30,
      "bind": {"input": "range", "min": -45, "max": 135, "step": 1},
      "on": [
        {"events": {"signal": "validAngle_HOR"}, "update": "validAngle_HOR"}
      ]
    },
    {
      "name": "phi",
      "value": 65,
      "bind": {"input": "range", "min": 0, "max": 180, "step": 1},
      "on": [
        {"events": {"signal": "validAngle_VER"}, "update": "validAngle_VER"}
      ]
    },
    {
      "name": "expand",
      "value": 0.6,
      "bind": {"input": "range", "min": 0, "max": 1, "step": 0.1},
      "on": [
        {
          "events": {"signal": "equation_id"},
          "update": "equation_id === 4 ?0.3:equation_id===5?0.5:0.6",
          "force": true
        }
      ]
    },
    {
      "name": "scale",
      "value": 1,
      "bind": {"input": "range", "min": 0, "max": 2, "step": 0.1},
      "on": [
        {
          "events": "view:mousewheel",
          "update": "round(10*max(0, min(2, scale + (event.wheelDelta > 0 ? 0.1 : -0.1))))/10"
        }
      ]
    },
    {"name": "axes", "value": true, "bind": {"input": "checkbox"}},
    {"name": "grid", "value": false, "bind": {"input": "checkbox"}},
    {
      "name": "equation",
      "value": "10*sin(sqrt(x²+y²))/sqrt(x²+y²)",
      "bind": {
        "input": "select",
        "options": [
          "10*sin(sqrt(x²+y²))/sqrt(x²+y²)",
          "x*y³ - y*x³",
          "sqrt(x²+y²)",
          "half tore",
          "half sphere"
        ]
      }
    },
    {"name": "size_x", "init": "length(domain('dx'))"},
    {"name": "size_y", "init": "length(domain('dy'))"},
    {
      "name": "equation_id",
      "init": "equation === '10*sin(sqrt(x²+y²))/sqrt(x²+y²)' ? 1:(equation === 'x*y³ - y*x³' ? 2 : equation === 'sqrt(x²+y²)' ? 3 : equation === 'half tore' ? 4: 5)",
      "on": [
        {
          "events": {"signal": "equation"},
          "update": "equation === '10*sin(sqrt(x²+y²))/sqrt(x²+y²)' ? 1:(equation === 'x*y³ - y*x³' ? 2 : equation === 'sqrt(x²+y²)' ? 3 : equation === 'half tore' ? 4: 5)"
        }
      ]
    },
    {"name": "size", "update": "scale*min(width,height)/2"},
    {"name": "center", "init": "{x:width/2, y:height/2}"},
    {
      "name": "angle_HOR",
      "on": [
        {
          "events": "view:mousemove[event.buttons === 1]",
          "update": "theta + ((event.movementX < 0) ^ (phi > 180) ? 5 : (event.movementX > 0) ^(phi > 180) ? -5 : 0)"
        }
      ]
    },
    {"name": "validAngle_HOR", "update": "max(min(angle_HOR,135),-45)"},
    {
      "name": "angle_VER",
      "on": [
        {
          "events": "view:mousemove[event.buttons === 1]",
          "update": "phi + (event.movementY < 0 ? 5 : event.movementY > 0 ? -5 : 0)"
        }
      ]
    },
    {"name": "validAngle_VER", "update": "max(min(angle_VER,180),0)"},
    {
      "name": "qrAngle_HOR",
      "init": "PI*(theta)/360",
      "on": [{"events": {"signal": "-theta"}, "update": "PI*(theta)/360"}]
    },
    {
      "name": "qrAngle_VER",
      "init": "PI*(phi)/360",
      "on": [{"events": {"signal": "phi"}, "update": "PI*(phi)/360"}]
    },
    {"name": "qrw0", "update": "cos(qrAngle_VER)"},
    {"name": "qrw1", "update": "cos(qrAngle_HOR)"},
    {"name": "qrx0", "update": "sin(qrAngle_VER)"},
    {"name": "qrz1", "update": "sin(qrAngle_HOR)"},
    {
      "name": "q",
      "update": "{x:qrx0*qrw1, y:-qrx0*qrz1, z:qrw0*qrz1, w: qrw0*qrw1}"
    },
    {"name": "q_1", "update": "{x:-q.x, y:-q.y, z: -q.z, w: q.w}"},
    {
      "name": "matrix_values",
      "init": "{}",
      "on": [
        {
          "events": "path:mouseover",
          "update": "{'x':isNumber(datum.data.x) ? format(datum.data.x,'.2~f'):datum.data.x,'y':isNumber(datum.data.y) ? format(datum.data.y,'.2~f'):datum.data.y,'z':format(datum.data.z,'.2~f'), id:datum.id}"
        },
        {"events": "path", "update": "{}"}
      ]
    },
    {
      "name": "is_dragging",
      "update": "false",
      "on": [
        {"events": "view:mousedown", "update": "true"},
        {
          "events": "view:mouseup, view:mousemove[event.buttons !== 1]",
          "update": "false"
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "dx",
      "type": "ordinal",
      "domain": {"data": "id_source", "field": "x", "sort": true}
    },
    {
      "name": "dy",
      "type": "ordinal",
      "domain": {"data": "id_source", "field": "y", "sort": true}
    },
    {
      "name": "dz",
      "type": "ordinal",
      "domain": {"data": "id_source", "field": "z", "sort": true}
    },
    {
      "name": "ix",
      "type": "band",
      "domain": {"data": "matrix", "field": "ix"},
      "range": [{"signal": "-size/2"}, {"signal": "size/2"}]
    },
    {
      "name": "iy",
      "type": "band",
      "domain": {"data": "matrix", "field": "iy"},
      "range": [{"signal": "-size/2"}, {"signal": "size/2"}]
    },
    {
      "name": "x",
      "type": "band",
      "domain": {"data": "matrix", "field": "ix"},
      "range": [-1, 1]
    },
    {
      "name": "y",
      "type": "band",
      "domain": {"data": "matrix", "field": "iy"},
      "range": [-1, 1]
    },
    {
      "name": "z",
      "type": "linear",
      "domain": {"data": "matrix", "field": "z"},
      "range": [{"signal": "-expand"}, {"signal": "expand"}]
    },
    {
      "name": "color",
      "type": "linear",
      "domain": {"data": "matrix", "field": "z"},
      "range": {"scheme": {"signal": "scheme"}}
    }
  ],
  "data": [
    {
      "name": "source",
      "values": [],
      "transform": [
        {
          "type": "sequence",
          "start": {"signal": "x_sequence.min"},
          "stop": {
            "signal": "x_sequence.max+(x_sequence.max-x_sequence.min)/(x_sequence.count-1)"
          },
          "step": {
            "signal": "(x_sequence.max-x_sequence.min)/(x_sequence.count-1)"
          },
          "as": "x"
        },
        {
          "type": "formula",
          "expr": "sequence(y_sequence.min,y_sequence.max + (y_sequence.max-y_sequence.min)/(y_sequence.count-1),(y_sequence.max-y_sequence.min)/(y_sequence.count-1))",
          "as": "y"
        },
        {"type": "flatten", "fields": ["y"]},
        {
          "type": "formula",
          "expr": "equation_id === 1 ?10*sin(sqrt(pow(10*datum.x,2)+pow(10*datum.y,2)))/sqrt(pow(10*datum.x,2)+pow(10*datum.y,2)): equation_id === 2 ? datum.x*pow(datum.y,3)-datum.y*pow(datum.x,3): equation_id === 3 ? sqrt(pow(datum.x,2)+pow(datum.y,2)) : equation_id === 4 ? sqrt(0.08- pow(sqrt(pow(datum.x,2) + pow(datum.y,2)) - 0.7,2))||0: sqrt(1- (pow(datum.x,2)+pow(datum.y,2)))||0",
          "as": "z"
        }
      ]
    },
    {
      "name": "volcano",
      "url": "https://raw.githubusercontent.com/vega/vega/master/docs/data/volcano.json"
    },
    {
      "name": "volcano_source",
      "values": [],
      "transform": [
        {
          "type": "sequence",
          "start": 0,
          "stop": {"signal": "data('volcano')[0].height"},
          "as": "y"
        },
        {
          "type": "formula",
          "expr": "sequence(0,data('volcano')[0].width,1)",
          "as": "x"
        },
        {"type": "flatten", "fields": ["x"]},
        {
          "type": "formula",
          "expr": "data('volcano')[0].values[data('volcano')[0].width*datum.y+datum.x]",
          "as": "z"
        }
      ]
    },
    {
      "name": "id_source",
      "source": "source",
      "transform": [
        {"type": "formula", "expr": "datum.x+'.'+datum.y", "as": "id"},
        {
          "type": "aggregate",
          "groupby": ["id", "x", "y"],
          "fields": ["z"],
          "ops": ["mean"],
          "as": ["z"]
        },
        {"type": "formula", "expr": "isValid(datum.z)?datum.z:null", "as": "z"}
      ]
    },
    {
      "name": "matrix",
      "values": [
        {
          "x": [
            -1,
            -0.9487179487179487,
            -0.8974358974358975,
            -0.8461538461538461,
            -0.7948717948717949,
            -0.7435897435897436,
            -0.6923076923076923,
            -0.641025641025641,
            -0.5897435897435898,
            -0.5384615384615385,
            -0.4871794871794872,
            -0.4358974358974359,
            -0.3846153846153846,
            -0.33333333333333337,
            -0.28205128205128205,
            -0.23076923076923084,
            -0.17948717948717952,
            -0.1282051282051282,
            -0.07692307692307698,
            -0.02564102564102566,
            0.02564102564102555,
            0.07692307692307687,
            0.1282051282051282,
            0.17948717948717952,
            0.23076923076923084,
            0.28205128205128194,
            0.33333333333333326,
            0.3846153846153846,
            0.4358974358974359,
            0.4871794871794872,
            0.5384615384615383,
            0.5897435897435896,
            0.641025641025641,
            0.6923076923076923,
            0.7435897435897436,
            0.7948717948717947,
            0.846153846153846,
            0.8974358974358974,
            0.9487179487179487,
            1
          ],
          "ix": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39
          ]
        }
      ],
      "transform": [
        {"type": "formula", "expr": "domain('dx')", "as": "x"},
        {"type": "formula", "expr": "sequence(0,size_x,1)", "as": "ix"},
        {"type": "flatten", "fields": ["ix", "x"]},
        {"type": "formula", "expr": "sequence(0,size_y,1)", "as": "iy"},
        {"type": "formula", "expr": "domain('dy')", "as": "y"},
        {"type": "flatten", "fields": ["iy", "y"]},
        {"type": "formula", "expr": "datum.x+'.'+datum.y", "as": "id"},
        {
          "type": "lookup",
          "key": "id",
          "from": "id_source",
          "fields": ["id"],
          "values": ["z"],
          "as": ["z"]
        },
        {
          "type": "formula",
          "expr": "{x:datum.x, y:datum.y, z:datum.z}",
          "as": "data"
        },
        {"type": "formula", "expr": "datum.ix+'.'+datum.iy", "as": "id"}
      ]
    },
    {
      "name": "projections",
      "source": "matrix",
      "transform": [
        {
          "type": "formula",
          "expr": "{x:scale('x',datum.ix),y:scale('y',datum.iy),z:isValid(datum.data.z)?scale('z',datum.data.z):0}",
          "as": "point"
        },
        {
          "type": "formula",
          "expr": "{x:q.w * datum.point.x + q.y*datum.point.z- q.z * datum.point.y, y:q.w * datum.point.y - q.x * datum.point.z  + q.z*datum.point.x, z:q.w * datum.point.z  + q.x*datum.point.y - q.y * datum.point.x, w: -q.x * datum.point.x - q.y * datum.point.y - q.z * datum.point.z}",
          "as": "q1"
        },
        {
          "type": "formula",
          "expr": "{x:datum.q1.w * q_1.x + datum.q1.x * q_1.w + datum.q1.y * q_1.z - datum.q1.z * q_1.y, y:datum.q1.w * q_1.y - datum.q1.x * q_1.z + datum.q1.y * q_1.w + datum.q1.z * q_1.x, z:datum.q1.w * q_1.z + datum.q1.x * q_1.y - datum.q1.y * q_1.x + datum.q1.z * q_1.w}",
          "as": "q2"
        },
        {
          "type": "formula",
          "expr": "{x:datum.q2.x*size/2, y:datum.q2.y*size/2, z:datum.q2.z*size/2}",
          "as": "projection"
        },
        {
          "type": "project",
          "fields": ["id", "ix", "iy", "data", "projection"],
          "as": ["id", "ix", "iy", "data", "projection"]
        }
      ]
    },
    {
      "name": "paths",
      "source": "projections",
      "transform": [
        {
          "type": "filter",
          "expr": "datum.ix < size_x -1 && datum.iy < size_y -1"
        },
        {
          "type": "formula",
          "expr": "[datum.ix+'.'+datum.iy, (datum.ix+1)+'.'+datum.iy,(datum.ix+1)+'.'+(datum.iy+1),datum.ix+'.'+(datum.iy+1)]",
          "as": "point"
        },
        {"type": "flatten", "fields": ["point"]},
        {
          "type": "lookup",
          "key": "id",
          "from": "projections",
          "fields": ["point"],
          "values": ["projection", "data"]
        },
        {
          "type": "aggregate",
          "groupby": ["id"],
          "fields": ["id", "projection.z", "data.z"],
          "ops": ["values", "mean", "mean"],
          "as": ["points", "avg_pz", "avg_z"]
        },
        {
          "type": "formula",
          "expr": "'M'+datum.points[0].projection.x+','+datum.points[0].projection.y+' L'+datum.points[1].projection.x+','+datum.points[1].projection.y+' L'+datum.points[2].projection.x+','+datum.points[2].projection.y+' L'+datum.points[3].projection.x+','+datum.points[3].projection.y+'z'",
          "as": "path"
        },
        {
          "type": "project",
          "fields": ["id", "points[0].data", "path", "avg_pz", "avg_z"],
          "as": ["id", "data", "path", "avg_pz", "avg_z"]
        }
      ]
    },
    {
      "name": "axes",
      "values": [
        {
          "root": {"x": -1, "y": -1, "z": -0.6},
          "q1": {
            "x": -0.5129297875892481,
            "y": -0.72154440694055,
            "z": -1.146847087232648,
            "w": 0.5108996577826705
          },
          "pq2": {
            "x": -0.3660254037844387,
            "y": -0.03352260941902674,
            "z": -1.4916104177841405
          },
          "p_root": {"x": -36.60254037844387, "y": -3.352260941902674},
          "axis": [
            {"label": "x", "x": 1, "y": -1, "z": -0.6, "isNumber": true},
            {"label": "y", "x": -1, "y": 1, "z": -0.6, "isNumber": true},
            {"label": "z", "x": -1, "y": -1, "z": 0.6, "isNumber": true}
          ]
        }
      ],
      "transform": [
        {
          "type": "formula",
          "expr": "{x:range('x')[0],y:range('y')[0],z:scale('z',domain('z')[0])}",
          "as": "root"
        },
        {
          "type": "formula",
          "expr": "{x:q.w * datum.root.x + q.y*datum.root.z- q.z * datum.root.y, y:q.w * datum.root.y - q.x * datum.root.z  + q.z*datum.root.x, z:q.w * datum.root.z  + q.x*datum.root.y - q.y * datum.root.x, w: -q.x * datum.root.x - q.y * datum.root.y - q.z * datum.root.z}",
          "as": "q1"
        },
        {
          "type": "formula",
          "expr": "{x:datum.q1.w * q_1.x + datum.q1.x * q_1.w + datum.q1.y * q_1.z - datum.q1.z * q_1.y, y:datum.q1.w * q_1.y - datum.q1.x * q_1.z + datum.q1.y * q_1.w + datum.q1.z * q_1.x, z:datum.q1.w * q_1.z + datum.q1.x * q_1.y - datum.q1.y * q_1.x + datum.q1.z * q_1.w}",
          "as": "pq2"
        },
        {
          "type": "formula",
          "expr": "{x:(datum.pq2.x)*size/2, y:(datum.pq2.y)*size/2}",
          "as": "p_root"
        },
        {
          "type": "formula",
          "expr": "[{label:'x', x:range('x')[1],y:range('y')[0],z:scale('z',domain('z')[0]), 'isNumber':isNumber(domain('x')[0])},{label:'y', x:range('x')[0],y:range('y')[1],z:scale('z',domain('z')[0]), 'isNumber':isNumber(domain('y')[0])},{label:'z', x:range('x')[0],y:range('y')[0],z:scale('z',domain('z')[1]), 'isNumber':true}]",
          "as": "axis"
        },
        {"type": "flatten", "fields": ["axis"]},
        {
          "type": "formula",
          "expr": "{x:q.w * datum.axis.x + q.y*datum.axis.z- q.z * datum.axis.y, y:q.w * datum.axis.y - q.x * datum.axis.z  + q.z*datum.axis.x, z:q.w * datum.axis.z  + q.x*datum.axis.y - q.y * datum.axis.x, w: -q.x * datum.axis.x - q.y * datum.axis.y - q.z * datum.axis.z}",
          "as": "q1"
        },
        {
          "type": "formula",
          "expr": "{x:datum.q1.w * q_1.x + datum.q1.x * q_1.w + datum.q1.y * q_1.z - datum.q1.z * q_1.y, y:datum.q1.w * q_1.y - datum.q1.x * q_1.z + datum.q1.y * q_1.w + datum.q1.z * q_1.x, z:datum.q1.w * q_1.z + datum.q1.x * q_1.y - datum.q1.y * q_1.x + datum.q1.z * q_1.w}",
          "as": "pq2"
        },
        {
          "type": "formula",
          "expr": "{x:(datum.pq2.x)*size/2, y:(datum.pq2.y)*size/2}",
          "as": "p_axis"
        }
      ]
    }
  ],
  "marks": [
    {
      "type": "rect",
      "encode": {
        "enter": {},
        "update": {
          "fill": {"signal": "theme === 'dark'?'black':'white'"},
          "cursor": [
            {"test": "is_dragging", "value": "grabbing"},
            {"value": "pointer"}
          ],
          "width": {"signal": "width"},
          "height": {"signal": "height"}
        }
      }
    },
    {
      "name": "axes_m",
      "type": "rule",
      "from": {"data": "axes"},
      "encode": {
        "enter": {"strokewidth": {"value": 1}},
        "update": {
          "opacity": {"signal": "axes?1:0"},
          "stroke": [
            {"test": "theme === 'dark'", "value": "lightgrey"},
            {"value": "black"}
          ],
          "x": {"field": "p_root.x", "offset": {"signal": "center.x"}},
          "y": {"field": "p_root.y", "offset": {"signal": "center.y"}},
          "x2": {"field": "p_axis.x", "offset": {"signal": "center.x"}},
          "y2": {"field": "p_axis.y", "offset": {"signal": "center.y"}}
        }
      }
    },
    {
      "type": "text",
      "from": {"data": "axes_m"},
      "encode": {
        "enter": {
          "text": {"field": "datum.axis.label"},
          "align": {"value": "center"}
        },
        "update": {
          "opacity": {"signal": "axes?1:0"},
          "fill": [
            {"test": "theme === 'dark'", "value": "lightgrey"},
            {"value": "black"}
          ],
          "xc": {"field": "x2"},
          "yc": {"field": "y2", "offset": -5},
          "tooltip": {
            "signal": "{'min':datum.datum.axis.isNumber?format(domain('d'+datum.datum.axis.label)[0],'.2~f'):domain('d'+datum.datum.axis.label)[0],'max':datum.datum.axis.isNumber?format(domain('d'+datum.datum.axis.label)[length(domain('d'+datum.datum.axis.label))-1],'.2~f'):domain('d'+datum.datum.axis.label)[length(domain('d'+datum.datum.axis.label))-1]}"
          }
        }
      }
    },
    {
      "sort": {"field": "datum.avg_pz"},
      "type": "path",
      "from": {"data": "paths"},
      "encode": {
        "update": {
          "cursor": [
            {"test": "is_dragging", "value": "grabbing"},
            {"value": "pointer"}
          ],
          "fill": [
            {"test": "!grid", "field": "avg_z", "scale": "color"},
            {"value": "transparent"}
          ],
          "stroke": {"field": "avg_z", "scale": "color"},
          "x": {"signal": "center.x"},
          "y": {"signal": "center.y"},
          "path": {"field": "path"}
        }
      }
    },
    {
      "type": "text",
      "interactive": false,
      "encode": {
        "enter": {"align": {"value": "center"}},
        "update": {
          "fill": [
            {"test": "theme === 'dark'", "value": "lightgrey"},
            {"value": "black"}
          ],
          "xc": {"signal": "width/2"},
          "yc": {"signal": "height*0.9"},
          "text": {
            "signal": "'id: '+ matrix_values.id+', x: '+matrix_values.x+', y: '+matrix_values.y+', z: '+matrix_values.z"
          },
          "opacity": {"signal": "isValid(matrix_values.x)?1:0"}
        }
      }
    },
    {
      "type": "text",
      "interactive": false,
      "encode": {
        "enter": {"x": {"value": 15}},
        "update": {
          "y": {"signal": "height*0.1"},
          "fill": [
            {"test": "theme === 'dark'", "value": "lightgrey"},
            {"value": "black"}
          ],
          "text": {
            "signal": "'Matrix size: '+size_x+'X'+size_y+'('+size_x*size_y+')'"
          }
        }
      }
    }
  ]
}