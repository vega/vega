{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 400,
  "height": 400,
  "background": "black",
  "title": {
    "text": "R persp emulation",
    "color": {"signal": "axis_color"},
    "dy": 25
  },
  "signals": [
    {"name": "x_sequence", "value": {"min": -10, "max": 10, "count": 30}},
    {"name": "y_sequence", "value": {"min": -10, "max": 10, "count": 30}},
    {
      "name": "scheme",
      "value": "blueorange",
      "bind": {
        "input": "select",
        "options": [
          "viridis",
          "blueorange",
          "darkgold",
          "darkblue",
          "darkgreen",
          "darkmulti",
          "purplegreen",
          "spectral"
        ]
      }
    },
    {
      "name": "theta",
      "value": 35,
      "bind": {"input": "range", "min": -45, "max": 135, "step": 1},
      "on": [
        {"events": {"signal": "validAngle_HOR"}, "update": "validAngle_HOR"}
      ]
    },
    {
      "name": "phi",
      "value": 60,
      "bind": {"input": "range", "min": 0, "max": 180, "step": 1},
      "on": [
        {"events": {"signal": "validAngle_VER"}, "update": "validAngle_VER"}
      ]
    },
    {
      "name": "expand",
      "value": 0.6,
      "bind": {"input": "range", "min": 0, "max": 2, "step": 0.1}
    },
    {
      "name": "scale",
      "value": 1,
      "bind": {"input": "range", "min": 0, "max": 2, "step": 0.1},
      "on": [
        {
          "events": "view:mousewheel",
          "update": "max(0, min(2, scale + (event.wheelDelta > 0 ? 0.1 : -0.1)))"
        }
      ]
    },
    {"name": "axes", "value": true, "bind": {"input": "checkbox"}},
    {"name": "grid", "value": false, "bind": {"input": "checkbox"}},
    {
      "name": "grid_color",
      "value": "lightgrey",
      "bind": {"input": "select", "options": ["lightgrey", "darkgrey"]}
    },
    {"name": "axis_color", "value": "lightgrey"},
    {
      "name": "equation",
      "value": "10*sin(sqrt(x²+y²))/sqrt(x²+y²)",
      "bind": {
        "input": "select",
        "options": [
          "10*sin(sqrt(x²+y²))/sqrt(x²+y²)",
          "x*y³ - y*x³",
          "sqrt(x²+y²)"
        ]
      }
    },
    {
      "name": "equation_id_changed",
      "update": "equation_id >0 ? setdata('areas',[{}]):null"
    },
    {"name": "size", "init": "min(width,height)/2"},
    {
      "name":"is_dragging",
      "update":"false",
      "on":[{"events":"view:mousedown","update":"true"},
      {"events":"view:mouseup, view:mousemove[event.buttons !== 1]", "update":"false"}]
    },
    {
      "name": "angle_HOR",
      "on": [
        {
          "events": {
            "source": "view",
            "type": "mousemove",
            "filter": "event.buttons === 1"
          },
          "update": "theta + ((event.movementX < 0) ^ (phi > 180) ? 5 : (event.movementX > 0) ^(phi > 180) ? -5 : 0)"
        }
      ]
    },
    {"name": "validAngle_HOR", "update": "max(min(angle_HOR,135),-45)"},
    {
      "name": "angle_VER",
      "on": [
        {
          "events": {
            "source": "view",
            "type": "mousemove",
            "filter": "event.buttons === 1"
          },
          "update": "phi + (event.movementY < 0 ? 5 : event.movementY > 0 ? -5 : 0)"
        }
      ]
    },
    {"name": "validAngle_VER", "update": "max(min(angle_VER,180),0)"},    
    {
      "name": "equation_id",
      "value": 1,
      "update": "equation === '10*sin(sqrt(x²+y²))/sqrt(x²+y²)' ? 1:(equation === 'x*y³ - y*x³' ? 2 : 3)"
    },
    {
      "name": "qrAngle_HOR",
      "init": "PI*(theta)/360",
      "on": [{"events": {"signal": "-theta"}, "update": "PI*(theta)/360"}]
    },
    {
      "name": "qrAngle_VER",
      "init": "PI*(phi)/360",
      "on": [{"events": {"signal": "phi"}, "update": "PI*(phi)/360"}]
    },
    {"name": "qrw0", "update": "cos(qrAngle_VER)"},
    {"name": "qrw1", "update": "cos(qrAngle_HOR)"},
    {"name": "qrx0", "update": "sin(qrAngle_VER)"},
    {"name": "qrz1", "update": "sin(qrAngle_HOR)"},
    {
      "name": "q",
      "update": "{x:qrx0*qrw1, y:-qrx0*qrz1, z:qrw0*qrz1, w: qrw0*qrw1}"
    },
    {"name": "q_1", "update": "{x:-q.x, y:-q.y, z: -q.z, w: q.w}"},
    {
      "name": "matrix_values",
      "init": "{}",
      "on": [
        {
          "events": "area:mouseover,line:mouseover",
          "update": "{'x':isNumber(datum.x) ? format(datum.x,'.2~f'):datum.x,'y':isNumber(datum.y) ? format(datum.y,'.2~f'):datum.y,'z':format(datum.value,'.2~f')}"
        },
        {"events": "area:mouseout,line:mouseout", "update": "{}"}
      ]
    }
  ],
  "scales": [
    {
      "name": "scale_x",
      "type": "point",
      "domain": {"data": "z_matrix", "field": "x"},
      "range": [{"signal": "-size/2"}, {"signal": "size/2"}]
    },
    {
      "name": "scale_y",
      "type": "point",
      "domain": {"data": "z_matrix", "field": "y"},
      "range": [{"signal": "-size/2"}, {"signal": "size/2"}]
    },
    {
      "name": "scale_z",
      "type": "linear",
      "domain": {"data": "z_matrix", "field": "z"},
      "range": [{"signal": "-size/2"}, {"signal": "size/2"}]
    }
  ],
  "data": [
    {
      "name": "matrix",
      "values": [],
      "transform": [
        {
          "type": "sequence",
          "start": {"signal": "x_sequence.min"},
          "stop": {
            "signal": "x_sequence.max+(x_sequence.max-x_sequence.min)/(x_sequence.count-1)"
          },
          "step": {
            "signal": "(x_sequence.max-x_sequence.min)/(x_sequence.count-1)"
          },
          "as": "x"
        },
        {
          "type": "formula",
          "expr": "sequence(y_sequence.min,y_sequence.max + (y_sequence.max-y_sequence.min)/(y_sequence.count-1),(y_sequence.max-y_sequence.min)/(y_sequence.count-1))",
          "as": "y"
        },
        {"type": "flatten", "fields": ["y"]}
      ]
    },
    {
      "name": "z_matrix",
      "source": "matrix",
      "transform": [
        {
          "type": "formula",
          "expr": "equation_id == 1 ? 10*sin(sqrt(pow(datum.x,2)+pow(datum.y,2)))/sqrt(pow(datum.x,2)+pow(datum.y,2))||1: (equation_id == 2 ? datum.x*pow(datum.y,3) - datum.y*pow(datum.x,3):sqrt(pow(datum.x,2)+pow(datum.y,2)))",
          "as": "z"
        }
      ]
    },
    {
      "name": "scaled_z_matrix",
      "source": "z_matrix",
      "transform": [
        {"type": "formula", "expr": "expand*datum.z", "as": "scaled_z"},
        {"type": "formula", "expr": "datum.x+'.'+datum.y", "as": "key"}
      ]
    },
    {
      "name": "size_matrix_x",
      "source": "z_matrix",
      "transform": [
        {"type": "aggregate", "fields": ["x"], "ops": ["distinct"]},
        {"type": "extent", "field": "distinct_x", "signal": "size_x"}
      ]
    },
    {
      "name": "size_matrix_y",
      "source": "z_matrix",
      "transform": [
        {"type": "aggregate", "fields": ["y"], "ops": ["distinct"]},
        {"type": "extent", "field": "distinct_y", "signal": "size_y"}
      ]
    },
    {
      "name": "projections",
      "source": "scaled_z_matrix",
      "transform": [
        {
          "type": "collect",
          "sort": {"field": ["x", "y"], "order": ["ascending", "ascending"]}
        },
        {
          "type": "formula",
          "expr": "{x:scale('scale_x',datum.x),y:scale('scale_y',datum.y),z:scale('scale_z',datum.scaled_z)}",
          "as": "points"
        },
        {
          "type": "formula",
          "expr": "{x:q.w * datum.points.x + q.y*datum.points.z- q.z * datum.points.y, y:q.w * datum.points.y - q.x * datum.points.z  + q.z*datum.points.x, z:q.w * datum.points.z  + q.x*datum.points.y - q.y * datum.points.x, w: -q.x * datum.points.x - q.y * datum.points.y - q.z * datum.points.z}",
          "as": "q1"
        },
        {
          "type": "formula",
          "expr": "{x:datum.q1.w * q_1.x + datum.q1.x * q_1.w + datum.q1.y * q_1.z - datum.q1.z * q_1.y, y:datum.q1.w * q_1.y - datum.q1.x * q_1.z + datum.q1.y * q_1.w + datum.q1.z * q_1.x, z:datum.q1.w * q_1.z + datum.q1.x * q_1.y - datum.q1.y * q_1.x + datum.q1.z * q_1.w}",
          "as": "pq2"
        },
        {"type": "formula", "expr": "(datum.pq2.x)*scale", "as": "px"},
        {"type": "formula", "expr": "(datum.pq2.y)*scale", "as": "py"},
        {"type": "formula", "expr": "(datum.pq2.z)", "as": "pq_z"}
      ]
    },
    {
      "name": "axes",
      "values": [
        {}
      ],
      "transform": [
        {
          "type": "formula",
          "expr": "{x:range('scale_x')[0],y:range('scale_y')[0],z:scale('scale_z',domain('scale_z')[0]*expand)}",
          "as": "root"
        },
        {
          "type": "formula",
          "expr": "{x:q.w * datum.root.x + q.y*datum.root.z- q.z * datum.root.y, y:q.w * datum.root.y - q.x * datum.root.z  + q.z*datum.root.x, z:q.w * datum.root.z  + q.x*datum.root.y - q.y * datum.root.x, w: -q.x * datum.root.x - q.y * datum.root.y - q.z * datum.root.z}",
          "as": "q1"
        },
        {
          "type": "formula",
          "expr": "{x:datum.q1.w * q_1.x + datum.q1.x * q_1.w + datum.q1.y * q_1.z - datum.q1.z * q_1.y, y:datum.q1.w * q_1.y - datum.q1.x * q_1.z + datum.q1.y * q_1.w + datum.q1.z * q_1.x, z:datum.q1.w * q_1.z + datum.q1.x * q_1.y - datum.q1.y * q_1.x + datum.q1.z * q_1.w}",
          "as": "pq2"
        },
        {
          "type": "formula",
          "expr": "{x:(datum.pq2.x)*scale, y:(datum.pq2.y)*scale}",
          "as": "p_root"
        },
        {
          "type": "formula",
          "expr": "[{label:'x', x:range('scale_x')[1],y:range('scale_y')[0],z:scale('scale_z',domain('scale_z')[0]*expand), 'isNumber':isNumber(domain('scale_x')[0])},{label:'y', x:range('scale_x')[0],y:range('scale_y')[1],z:scale('scale_z',domain('scale_z')[0]*expand), 'isNumber':isNumber(domain('scale_y')[0])},{label:'z', x:range('scale_x')[0],y:range('scale_y')[0],z:scale('scale_z',domain('scale_z')[1]*expand), 'isNumber':true}]",
          "as": "axis"
        },
        {"type": "flatten", "fields": ["axis"]},
        {
          "type": "formula",
          "expr": "{x:q.w * datum.axis.x + q.y*datum.axis.z- q.z * datum.axis.y, y:q.w * datum.axis.y - q.x * datum.axis.z  + q.z*datum.axis.x, z:q.w * datum.axis.z  + q.x*datum.axis.y - q.y * datum.axis.x, w: -q.x * datum.axis.x - q.y * datum.axis.y - q.z * datum.axis.z}",
          "as": "q1"
        },
        {
          "type": "formula",
          "expr": "{x:datum.q1.w * q_1.x + datum.q1.x * q_1.w + datum.q1.y * q_1.z - datum.q1.z * q_1.y, y:datum.q1.w * q_1.y - datum.q1.x * q_1.z + datum.q1.y * q_1.w + datum.q1.z * q_1.x, z:datum.q1.w * q_1.z + datum.q1.x * q_1.y - datum.q1.y * q_1.x + datum.q1.z * q_1.w}",
          "as": "pq2"
        },
        {
          "type": "formula",
          "expr": "{x:(datum.pq2.x)*scale, y:(datum.pq2.y)*scale}",
          "as": "p_axis"
        }
      ]
    },
    {
      "name": "areas",
      "values": [
        {
        }
      ],
      "transform": [
        {"type": "formula", "expr": "sequence(1,size_x[0],1)", "as": "i"},
        {"type": "formula", "expr": "sequence(1,size_y[0],1)", "as": "j"},
        {"type": "flatten", "fields": ["i"]},
        {"type": "flatten", "fields": ["j"]},
        {
          "type": "formula",
          "expr": "[(datum.i-1)*size_y[0]+(datum.j-1),(datum.i)*size_y[0]+(datum.j-1),(datum.i)*size_y[0]+(datum.j),(datum.i-1)*size_y[0]+(datum.j),(datum.i-1)*size_y[0]+(datum.j-1)]",
          "as": "indice"
        },
        {"type": "flatten", "fields": ["indice"]},
        {
          "type": "formula",
          "expr": "data('projections')[datum.indice]",
          "as": "item"
        },
        {
          "type": "project",
          "fields": [
            "i",
            "j",
            "item.px",
            "item.py",
            "item.x",
            "item.y",
            "item.z",
            "item.pq_z"
          ],
          "as": ["i", "j", "px", "py", "x", "y", "z", "pq_z"]
        },
        {
          "type": "window",
          "groupby": ["i", "j"],
          "fields": ["z", "pq_z"],
          "frame": [null, null],
          "ops": ["average", "average"],
          "as": ["value", "avg_pqz"]
        },
        {"type": "collect", "sort": {"field": ["avg_pqz"]}}
      ]
    }
  ],
  "marks": [
    {
      "type":"rect",
      "encode": {
        "enter":{
          "fill":{"value":"transparent"}
        },
        "update":{
          "cursor":[{"test":"is_dragging", "value":"grabbing"},{"value":"pointer"}],
          "width":{"signal":"width"},
          "height":{"signal":"height"}
        }
      }
    },
    {
      "name": "axes_m",
      "type": "rule",
      "from": {"data": "axes"},
      "encode": {
        "enter": {
          "stroke": {"signal": "axis_color"},
          "strokewidth": {"value": 1}
        },
        "update": {
          "opacity": {"signal": "axes?1:0"},
          "x": {"field": "p_root.x", "offset": {"signal": "width/2"}},
          "y": {"field": "p_root.y", "offset": {"signal": "height/2"}},
          "x2": {"field": "p_axis.x", "offset": {"signal": "width/2"}},
          "y2": {"field": "p_axis.y", "offset": {"signal": "height/2"}}
        }
      }
    },
    {
      "type": "text",
      "from": {"data": "axes_m"},
      "encode": {
        "enter": {
          "text": {"field": "datum.axis.label"},
          "fill": {"signal": "axis_color"},
          "align": {"value": "center"}
        },
        "update": {
          "opacity": {"signal": "axes?1:0"},
          "xc": {"field": "x2"},
          "yc": {"field": "y2", "offset": -5},
          "tooltip": {
            "signal": "{'min':datum.datum.axis.isNumber?format(domain('scale_'+datum.datum.axis.label)[0],'.2~f'):domain('scale_'+datum.datum.axis.label)[0],'max':datum.datum.axis.isNumber?format(domain('scale_'+datum.datum.axis.label)[length(domain('scale_'+datum.datum.axis.label))-1],'.2~f'):domain('scale_'+datum.datum.axis.label)[length(domain('scale_'+datum.datum.axis.label))-1]}"
          }
        }
      }
    },
    {
      "type": "group",
      "from": {
        "facet": {"name": "area", "data": "areas", "groupby": ["i", "j"]}
      },
      "scales": [
        {
          "name": "color",
          "type": "linear",
          "domain": {"data": "areas", "field": "value"},
          "range": {"scheme": {"signal": "scheme"}}
        }
      ],
      "marks": [
        {
          "type": "area",
          "from": {"data": "area"},
          "encode": {
            "update": {
              "cursor":[{"test":"is_dragging", "value":"grabbing"},{"value":"pointer"}],
              "fill": {"field": "value", "scale": "color"},
              "x": {"field": "px", "offset": {"signal": "width/2"}},
              "y": {"field": "py", "offset": {"signal": "height/2"}},
              "y2": {"value": 0}
            }
          }
        },
        {
          "type": "line",
          "from": {"data": "area"},
          "encode": {
            "enter": {},
            "update": {
              "cursor":[{"test":"is_dragging", "value":"grabbing"},{"value":"pointer"}],
              "strokeWidth": [{"test": "grid", "value": 0.3}, {"value": 1}],
              "stroke": [
                {"test": "grid", "signal": "grid_color"},
                {"field": "value", "scale": "color"}
              ],
              "x": {"field": "px", "offset": {"signal": "width/2"}},
              "y": {"field": "py", "offset": {"signal": "height/2"}},
              "y2": {"value": 0}
            }
          }
        }
      ]
    },
    {
      "type": "text",
      "encode": {
        "enter": {
          "fill": {"signal": "axis_color"},
          "align": {"value": "center"}
        },
        "update": {
          "xc": {"signal": "width/2"},
          "yc": {"signal": "height*0.9"},
          "text": {
            "signal": "'x: '+matrix_values.x+', y: '+matrix_values.y+', z: '+matrix_values.z"
          },
          "opacity": {"signal": "isValid(matrix_values.x)?1:0"}
        }
      }
    },
    {
      "type": "text",
      "encode": {
        "enter":{
          "x":{"value": 15}
        },
        "update":{
          "y":{"signal": "height*0.1"},
          "fill":{"signal":"axis_color"},
          "text":{"signal":"'Matrix size: '+size_x[0]+'X'+size_y[0]+'('+size_x[0]*size_y[0]+')'"}
        }
      }
    }
  ]
}